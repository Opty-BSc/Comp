%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "node.h"
#include "tabid.h"
#include "y.tab.h"
#include "minor.h"
#define TRACE
/* Declarations */
extern int errors;
extern int debugNode;
extern char **yynames;
extern char *dupStr(const char *s);
extern int yyerror(char *s);
extern FILE *yyout;
/* In File Declarations */
/* Variable Declarations */
int yyselres = 0;
static int lbl;
static char *externid[100];
static int ecnt;
static int chLoad;
static int ciclbl[10][3];
static int ciccnt = -1;
static int condlbl[10][2];
static int condcnt = -1;
static int jmp[2];
/* Function Declarations */
static char *mklbl(int lb);
static char *mkFid(char *s);
static void popExtern(char *id);
static int pos(char *id);
void doMain(int enter, Node *body);
void doFunc(int typ, char *id, int enter, Node *body);
void decVar(int typ, char *id, Node *sz, Node *val);
void decExterns();
static void setPtr(Node *p, int sz);
static void Str(char *s);
static void Array(Node *p, int sz);
static void doCall(int ext, char *id, int nB);
static void preCmp(Node *p);
static void addArith(Node *p);
static void subArith(Node *p);
static int eqVar(Node *a, Node *b);
static int eqVarL(Node *p);
static int eqVarR(Node *p);
static int eqVarI(Node *a, Node *b);
static int eqVarIL(Node *p);
static int eqVarIR(Node *p);
static void yytrace(NODEPTR_TYPE p, int eruleno, int cost, int bcost);
%}
%include "y.tab.h"
%term TRASH = ';' ECHO = '!' ALLOC = '#' INPUT = '?'
%term ADD = '+' SUB = '-' MUL = '*' DIV = '/' POW = '^' MOD = '%'
%term LT = '<' GT = '>' EQ = '=' NOT = '~' AND = '&' OR = '|'
%%

s: BODY(varS, iBlock)
s: litS
s: intS

%! Local Vars Start
varS        : VARS(varS, localVar)
varS        : NIL
localVar    : V_TYPE(ARRAY, V_ID(ID, V_DIM))    1 {
    /* Array [sz] */
    fprintf(yyout, pfIMM pfALLOC pfSP, INT_SZ * RIGHT_CHILD(RIGHT_CHILD(p))->value.i);
    fprintf(yyout, pfLOCA, pos(LEFT_CHILD(RIGHT_CHILD(p))->value.s));
}
localVar    : V_TYPE(type, V_ID(ID, NIL))
type        : NUMBER
type        : STRING
type        : ARRAY
%! Local Vars End

%! Literal Seq Start
litS        : LITERALS(litS, INT)   1 { fprintf(yyout, pfCHAR, UC(RIGHT_CHILD(p)->value.i)); }
litS        : LITERALS(litS, CHAR)  1 { fprintf(yyout, pfCHAR, UC(RIGHT_CHILD(p)->value.i)); }
litS        : LITERALS(litS, STR)   1 { for (char *s = RIGHT_CHILD(p)->value.s; *s; s++) fprintf(yyout, pfCHAR, UC(*s)); }
litS        : NIL
%! Literal Seq End

%! Integer Seq Start
intS        : INTS(intS, INT)       1 { PLACE(p) = PLACE(LEFT_CHILD(p)) + 1; fprintf(yyout, pfINTEGER, RIGHT_CHILD(p)->value.i); }
intS        : NIL                   1 { PLACE(p) = 0; }
%! Integer Seq End

%! Instructions
iBlock      : BLOCK(iSEQ, iLast)
iSEQ        : INSTRS(iSEQ, instruction)
iSEQ        : NIL
iLast       : RETURN(NIL)           1 { fprintf(yyout, pfLEAVE pfRET); }
iLast       : RETURN(rValue)        1 { fprintf(yyout, pfPOP pfLEAVE pfRET); }
iLast       : NIL

instruction : EXPR(rValue, TRASH)   1 { fprintf(yyout, pfTRASH, typeBytes(INFO(LEFT_CHILD(p)))); }
instruction : EXPR(rValue, ECHO)    1 { doCall(1, isStr(LEFT_CHILD(p)) ? "prints" : "printi", typeBytes(INFO(LEFT_CHILD(p)))); }

%! Alloc Start
instruction : ALLOC(rValue, ADDR(ID))   1 {
    if ((PLACE(p) = eleBytes(INFO(RIGHT_CHILD(p)))) > 1) fprintf(yyout, pfIMM pfMUL, (int)PLACE(p));
    fprintf(yyout, pfALLOC pfSP pfADDRA, LEFT_CHILD(RIGHT_CHILD(p))->value.s);
}
instruction : ALLOC(rValue, LOCAL(ID))  1 {
    if ((PLACE(p) = eleBytes(INFO(RIGHT_CHILD(p)))) > 1) fprintf(yyout, pfIMM pfMUL, (int)PLACE(p));
    fprintf(yyout, pfALLOC pfSP pfLOCA, pos(LEFT_CHILD(RIGHT_CHILD(p))->value.s));
}
%! Alloc End

%! For Start
instruction : FOR(iFor, STEP(iForBody, rValue))     1 {
    fprintf(yyout, pfTRASH, typeBytes(INFO(RIGHT_CHILD(RIGHT_CHILD(p)))));
    fprintf(yyout, pfJMP, mklbl(ciclbl[ciccnt][0]));
    fprintf(yyout, pfLABEL, mklbl(ciclbl[ciccnt--][2]));
}
iFor        : rValue                                1 {
    fprintf(yyout, pfTRASH, typeBytes(INFO(p)));
    fprintf(yyout, pfLABEL, mklbl(ciclbl[++ciccnt][0] = ++lbl));
    ciclbl[ciccnt][1] = ++lbl;
    ciclbl[ciccnt][2] = ++lbl;
}
iForBody    : DO(UNTIL(iForCond, rJump), iBlock)    1 { fprintf(yyout, pfLABEL, mklbl(ciclbl[ciccnt][1])); }
iForCond    : START     1 { jmp[0] = 1; jmp[1] = ciclbl[ciccnt][2]; }
iLast       : REPEAT    1 { fprintf(yyout, pfJMP, mklbl(ciclbl[ciccnt][1])); }
iLast       : STOP      1 { fprintf(yyout, pfJMP, mklbl(ciclbl[ciccnt][2])); }
%! For End

%! Conditions Start
instruction : CONDITION(iIf, ELSES(iElifS, iElse))      1 {
    fprintf(yyout, pfLABEL, mklbl(condlbl[condcnt--][1]));
}
iIf         : IF(JMP(iIfCond, rJump), THEN(iBlock))     1 {
    fprintf(yyout, pfJMP, mklbl(condlbl[condcnt][1] = ++lbl));
    fprintf(yyout, pfLABEL, mklbl(condlbl[condcnt][0]));
}
iElif       : ELIF(JMP(iElifCond, rJump), THEN(iBlock)) 1 {
    fprintf(yyout, pfJMP, mklbl(condlbl[condcnt][1]));
    fprintf(yyout, pfLABEL, mklbl(condlbl[condcnt][0]));
}
iIfCond     : START     1 { jmp[0] = 0; jmp[1] = condlbl[++condcnt][0] = ++lbl; }
iElifCond   : START     1 { jmp[0] = 0; jmp[1] = condlbl[condcnt][0] = ++lbl; }
iElifS      : ELIFS(iElifS, iElif)
iElifS      : NIL
iElse       : ELSE(iBlock)
iElse       : NIL
%! Conditions End

%! Conditional JMPs Start
rJump       : LT(rValue, rValue)        1 { preCmp(p); fprintf(yyout, jmp[0] ? pfJLT : pfJGE, mklbl(jmp[1])); }
rJump       : GT(rValue, rValue)        1 { preCmp(p); fprintf(yyout, jmp[0] ? pfJGT : pfJLE, mklbl(jmp[1])); }
rJump       : LE(rValue, rValue)        1 { preCmp(p); fprintf(yyout, jmp[0] ? pfJLE : pfJGT, mklbl(jmp[1])); }
rJump       : GE(rValue, rValue)        1 { preCmp(p); fprintf(yyout, jmp[0] ? pfJGE : pfJLT, mklbl(jmp[1])); }
rJump       : NE(rValue, rValue)        1 { preCmp(p); fprintf(yyout, jmp[0] ? pfJNE : pfJEQ, mklbl(jmp[1])); }
rJump       : EQ(rValue, rValue)        1 { preCmp(p); fprintf(yyout, jmp[0] ? pfJEQ : pfJNE, mklbl(jmp[1])); }
rJump       : rValue                    1 { fprintf(yyout, jmp[0] ? pfJNZ : pfJZ, mklbl(jmp[1])); }
%! Conditional JMPs End

%! LValue Start
lValue      : ADDR(ID)                  1 { fprintf(yyout, pfADDR, LEFT_CHILD(p)->value.s); }
lValue      : LOCAL(ID)                 1 { fprintf(yyout, pfLOCAL, pos(LEFT_CHILD(p)->value.s)); }
lValue      : LINDEX(lLoad, rValue)     1 { if ((PLACE(p) = eleBytes(INFO(LEFT_CHILD(p)))) > 1) fprintf(yyout, pfIMM pfMUL, (int)(PLACE(p))); fprintf(yyout, pfADD); }
lLoad       : lValue                    1 { fprintf(yyout, (PLACE(p) == CH_SZ) ? pfLDCHR : pfLOAD); }
lLoad       : ADDR(ID)                  1 { fprintf(yyout, pfADDRV, LEFT_CHILD(p)->value.s); }
lLoad       : LOCAL(ID)                 1 { fprintf(yyout, pfLOCV, pos(LEFT_CHILD(p)->value.s)); }
lStore      : lValue                    1 { fprintf(yyout, (PLACE(p) == CH_SZ) ? pfSTCHR : pfSTORE); }
lStore      : ADDR(ID)                  1 { fprintf(yyout, pfADDRA, LEFT_CHILD(p)->value.s); }
lStore      : LOCAL(ID)                 1 { fprintf(yyout, pfLOCA, pos(LEFT_CHILD(p)->value.s)); }
%! LValue End

%! Function Call Start
call        : CALL(FETCH(ID), argS)     1 { doCall(0, LEFT_CHILD(LEFT_CHILD(p))->value.s, PLACE(RIGHT_CHILD(p))); }
argS        : ARGS(rValue, argS)        1 { PLACE(p) = PLACE(RIGHT_CHILD(p)) + typeBytes(INFO(LEFT_CHILD(p))); }
argS        : NIL                       1 { PLACE(p) = 0; }
%! Function Call End

rValue      : INT                       1 { fprintf(yyout, pfIMM, p->value.i); }
rValue      : CHAR                      1 { fprintf(yyout, pfIMM, p->value.i); }
rValue      : STR                       1 { fprintf(yyout, pfRODATA pfALIGN pfLABEL, mklbl(++lbl)); Str(p->value.s); fprintf(yyout, pfTEXT pfADDR, mklbl(lbl)); }
rValue      : LITSEQ(litStart, litS)    1 { fprintf(yyout, pfCHAR pfTEXT pfADDR, 0, mklbl(lbl)); }
litStart    : START                     1 { fprintf(yyout, pfRODATA pfALIGN pfLABEL, mklbl(++lbl)); }
rValue      : INPUT                     1 { doCall(1, "readi", 0); }
rValue      : UMINUS(rValue)            1 { fprintf(yyout, pfNEG); }
rValue      : ADD(rValue, rValue)       1 { addArith(p); }
rValue      : SUB(rValue, rValue)       1 { subArith(p); }
rValue      : MUL(rValue, rValue)       1 { fprintf(yyout, pfMUL); }
rValue      : DIV(rValue, rValue)       1 { fprintf(yyout, pfDIV); }
rValue      : MOD(rValue, rValue)       1 { fprintf(yyout, pfMOD); }
rValue      : POW(rValue, rValue)       1 { doCall(1, "poweri", 8); }
rValue      : LT(rValue, rValue)        1 { preCmp(p); fprintf(yyout, pfLT); }
rValue      : GT(rValue, rValue)        1 { preCmp(p); fprintf(yyout, pfGT); }
rValue      : LE(rValue, rValue)        1 { preCmp(p); fprintf(yyout, pfLE); }
rValue      : GE(rValue, rValue)        1 { preCmp(p); fprintf(yyout, pfGE); }
rValue      : NE(rValue, rValue)        1 { preCmp(p); fprintf(yyout, pfNE); }
rValue      : EQ(rValue, rValue)        1 { preCmp(p); fprintf(yyout, pfEQ); }
rValue      : NOT(rValue)               1 { fprintf(yyout, pfIMM pfEQ, 0); }
rValue      : AND(rAnd, rValue)         1 { fprintf(yyout, pfLABEL, mklbl(PLACE(LEFT_CHILD(p)))); }
rAnd        : rValue                    1 { fprintf(yyout, pfDUP pfJZ pfTRASH, mklbl(PLACE(p) = ++lbl), typeBytes(INFO(p))); }
rValue      : OR(rOr, rValue)           1 { fprintf(yyout, pfLABEL, mklbl(PLACE(LEFT_CHILD(p)))); }
rOr         : rValue                    1 { fprintf(yyout, pfDUP pfJNZ pfTRASH, mklbl(PLACE(p) = ++lbl), typeBytes(INFO(p))); }
rValue      : PTR(lValue)
rValue      : LOAD(lLoad)
rValue      : call
rValue      : RINDEX(call, rValue)      1 {
    if ((PLACE(p) = eleBytes(INFO(LEFT_CHILD(p)))) > 1) fprintf(yyout, pfIMM pfMUL, (int)(PLACE(p)));
    fprintf(yyout, pfADD);
    fprintf(yyout, (PLACE(p) == CH_SZ) ? pfLDCHR : pfLOAD); 
}

rValue      : PRE_INCR(lValue)          1 { fprintf(yyout, pfDUP pfINCR pfLOAD, 1); }
rValue      : PRE_DECR(lValue)          1 { fprintf(yyout, pfDUP pfDECR pfLOAD, 1); }
rValue      : POS_INCR(lValue)          1 { fprintf(yyout, pfDUP pfLOAD pfSWAP pfINCR, 1); }
rValue      : POS_DECR(lValue)          1 { fprintf(yyout, pfDUP pfLOAD pfSWAP pfDECR, 1); }

%! Assignment Start
rValue      : ASSIGN(rCopy, lStore)
rCopy       : rValue                    1 { fprintf(yyout, pfDUP); }

%! Possible Ptr Arithmetic
%! Var +:= Literal
rValue      : ASSIGN(ADD(LOAD(aV), aT), lValue) eqVarL { fprintf(yyout, pfDUP pfINCR pfLOAD, assArithBytes(INFO(RIGHT_CHILD(p))) * RIGHT_CHILD(LEFT_CHILD(p))->value.i); }

%! Var -:= Literal
rValue      : ASSIGN(SUB(LOAD(aV), aT), lValue) eqVarL { fprintf(yyout, pfDUP pfDECR pfLOAD, assArithBytes(INFO(RIGHT_CHILD(p))) * RIGHT_CHILD(LEFT_CHILD(p))->value.i); }

%! No Ptr Arithmetic (Yacc ensures Var != Array on '+' Right Side)
%! Var := Literal + Var
rValue      : ASSIGN(ADD(aT, LOAD(aV)), lValue) eqVarR { fprintf(yyout, pfDUP pfINCR pfLOAD, LEFT_CHILD(LEFT_CHILD(p))->value.i); }

%! Indexed Var +:= Literal
rValue      : ASSIGN(ADD(LOAD(aI), aT), lValue) eqVarIL { fprintf(yyout, pfDUP pfINCR, RIGHT_CHILD(LEFT_CHILD(p))->value.i); fprintf(yyout, isStr(LEFT_CHILD(RIGHT_CHILD(p))) ? pfLDCHR : pfLOAD); }

%! Indexed Var -:= Literal
rValue      : ASSIGN(SUB(LOAD(aI), aT), lValue) eqVarIL { fprintf(yyout, pfDUP pfDECR, RIGHT_CHILD(LEFT_CHILD(p))->value.i); fprintf(yyout, isStr(LEFT_CHILD(RIGHT_CHILD(p))) ? pfLDCHR : pfLOAD); }

%! Indexed Var := Literal + Indexed Var
rValue      : ASSIGN(ADD(aT, LOAD(aI)), lValue) eqVarIR { fprintf(yyout, pfDUP pfINCR, LEFT_CHILD(LEFT_CHILD(p))->value.i); fprintf(yyout, isStr(LEFT_CHILD(RIGHT_CHILD(p))) ? pfLDCHR : pfLOAD); }

aV: ADDR(ID)
aV: LOCAL(ID)
aI: LINDEX(aV, aT)
aT: INT
aT: CHAR
%! Assignment End
%%

static char *mklbl(int lb) {
    static char buf[20];
    sprintf(buf, "_i%d", lb);
    return buf;
}

static char *mkFid(char *s) {
    static char buf[80];
    sprintf(buf, "_%s", s);
    return buf;
}

static void popExtern(char *id) {

    for (int i = 0; i < ecnt; i++) {
        if (externid[i] && !strcmp(externid[i], id)) {
            free(externid[i]);
            externid[i] = NULL;
        }
    }
}

void decExterns() {

    for (int i = 0; i < ecnt; i++) {
        if (externid[i]) {
            fprintf(yyout, pfEXTRN, externid[i]);
            free(externid[i]);
            externid[i] = NULL;
        }
    }
}

static int pos(char *id) {

    int **attrib = (int **)malloc(sizeof(int *));
    if (attrib == NULL) { yyerror("[Out of Memory]"); exit(2); }
    IDfind(id, (void **)attrib);
    int attr = **attrib;
    free(attrib);
    return attr;
}

void doMain(int enter, Node *body) {

    if (errors) return;
    char *id = mkFid("main");

    fprintf(yyout, pfTEXT pfALIGN pfGLOBL pfLABEL pfENTER, id, pfFUNC, id, enter);
    yyselres |= yyselect(body);
    fprintf(yyout, pfIMM pfPOP pfLEAVE pfRET, 0);
}

void doFunc(int typ, char *id, int enter, Node *body) {

    if (errors) return;
    id = mkFid(id);
    popExtern(id);

    if (isForw(typ)) {
        externid[ecnt++] = dupStr(id);
        return;
    }
    if (isPubl(typ)) fprintf(yyout, pfGLOBL, id, pfFUNC);

    fprintf(yyout, pfTEXT pfALIGN pfLABEL pfENTER, id, enter);

    yyselres |= yyselect(body);

    fprintf(yyout, pfLEAVE pfRET);
}

void decVar(int typ, char *id, Node *sz, Node *val) {

    if (errors) return;
    popExtern(id);

    if (isPubl(typ)) fprintf(yyout, pfGLOBL, id, pfOBJ);

    if (OP_LABEL(val) == NIL) {
        if (isForw(typ)) {
            externid[ecnt++] = dupStr(id);
            return;
        }
        if (OP_LABEL(sz) == NIL) {
            fprintf(yyout, pfBSS pfALIGN pfLABEL pfBYTE, id, typeBytes(typ));
            return;
        }
    }

    if (isConst(typ)) fprintf(yyout, pfRODATA pfALIGN pfLABEL, id);
    else fprintf(yyout, pfDATA pfALIGN pfLABEL, id);

    if (NAKED_TYPE(typ) == _INT) {
        fprintf(yyout, pfINTEGER, val->value.i);
        return;
    }
    /* Ptr */
    char *lb = mklbl(++lbl);
    fprintf(yyout, pfID pfLABEL, lb, lb);
    setPtr(val, OP_LABEL(sz) != NIL ? sz->value.i : 1);
}

static void setPtr(Node *p, int sz) {

    switch (OP_LABEL(p)) {
        case STR:
            Str(p->value.s);
            break;
        case NIL:
        case INT:
        case INTS:
            Array(p, sz);
            break;
        case LITERALS:
            yyselres |= yyselect(p);
            fprintf(yyout, pfCHAR, 0);
            break;
    }
}

static void Str(char *s) {

    do fprintf(yyout, pfCHAR, UC(*s));
    while (*s++);
}

static void Array(Node *p, int sz) {

    switch (OP_LABEL(p)) {
        case INTS:
            yyselres |= yyselect(p);
            sz -= PLACE(p);
            break;
        case INT:
            fprintf(yyout, pfINTEGER, p->value.i);
            sz--;
            break;
    }
    while (sz-- > 0) fprintf(yyout, pfINTEGER, 0);
}

static void doCall(int ext, char *id, int nB) {

    id = mkFid(id);
    if (ext) {
        popExtern(id);
        externid[ecnt++] = dupStr(id);
    }
    fprintf(yyout, pfCALL, id);
    if (nB) fprintf(yyout, pfTRASH, nB);
    fprintf(yyout, pfPUSH);
}

static void preCmp(Node *p) {

    if (isStr(LEFT_CHILD(p))) {
        doCall(1, "strcmp", 2 * pfWORD);
        fprintf(yyout, pfIMM, 0);
    }
}

static void addArith(Node *p) {

    if (NAKED_TYPE(INFO(LEFT_CHILD(p))) == NAKED_TYPE(INFO(RIGHT_CHILD(p)))) {
        fprintf(yyout, pfADD);
        return;
    }
    /* Sum is Commutative. Therefore: */
    /* Yacc ensures that Integer is on Top of the Stack */
    fprintf(yyout, pfIMM pfMUL pfADD, INT_SZ);
}

static void subArith(Node *p) {

    if (NAKED_TYPE(INFO(LEFT_CHILD(p))) == NAKED_TYPE(INFO(RIGHT_CHILD(p)))) {
        if (isInt(RIGHT_CHILD(p))) fprintf(yyout, pfSUB);
        else fprintf(yyout, pfSUB pfIMM pfDIV, INT_SZ);
    } else {
        if (isInt(RIGHT_CHILD(p))) fprintf(yyout, pfIMM pfMUL pfSUB, INT_SZ);
        else fprintf(yyout, pfSWAP pfIMM pfMUL pfSWAP pfSUB, INT_SZ);
    }
}

static int eqVar(Node *a, Node *b) {

    return (OP_LABEL(a) == ADDR || OP_LABEL(a) == LOCAL) && OP_LABEL(a) == OP_LABEL(b) &&
    !strcmp(LEFT_CHILD(a)->value.s, LEFT_CHILD(b)->value.s) ? 1 : 0X7FFF;
}

static int eqVarI(Node *a, Node *b) {

    return OP_LABEL(a) == LINDEX && OP_LABEL(a) == OP_LABEL(b) &&
    RIGHT_CHILD(a)->value.i == RIGHT_CHILD(b)->value.i ?
    eqVar(LEFT_CHILD(a), LEFT_CHILD(b)) : 0X7FFF;
}

static int eqVarL(Node *p) {
    return eqVar(LEFT_CHILD(LEFT_CHILD(LEFT_CHILD(p))), RIGHT_CHILD(p));
}

static int eqVarR(Node *p) {
    return eqVar(LEFT_CHILD(RIGHT_CHILD(LEFT_CHILD(p))), RIGHT_CHILD(p));
}

static int eqVarIL(Node *p) {
    return eqVarI(LEFT_CHILD(LEFT_CHILD(LEFT_CHILD(p))), RIGHT_CHILD(p));
}

static int eqVarIR(Node *p) {
    return eqVarI(LEFT_CHILD(RIGHT_CHILD(LEFT_CHILD(p))), RIGHT_CHILD(p));
}

#ifndef NOTRACE
static void yytrace(NODEPTR_TYPE p, int eruleno, int cost, int bcost) {

    int op = OP_LABEL(p);
    YYCONST char *term = yytermname[op] ? yytermname[op] : "?";
	if (debugNode) {
        fprintf(stderr, "0x%p:%s matched %s with cost %d vs. %d\n", p, term, yystring[eruleno], cost, bcost);
    }
	if (cost >= MAX_COST && bcost >= MAX_COST) {
        fprintf(stderr, "0x%p:%s NO MATCH %s with cost %d vs. %d\n", p, term, yystring[eruleno], cost, bcost);
		printNode(p, stderr, yynames);
	}
}
#endif
